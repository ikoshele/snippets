// Find specific word in a string
/*
  Напиши функцию checkForSpam(str)
  
  Функция принимает 1 параметр str - строку,
  и проверять ее на содержание слов: spam и sale
  
  Если нашли зарещенное слово то функция возвращает true,
  если запрещенных слов нет функция возвращает false
  
  PS: слова могут быть в произвольном регистре
*/
const checkForSpam = (str) => {
  if (str.search(/sale/i) > 0 || str.search(/spam/i) > 0)  {
    return true;
  } else {
    return false;
  }
};
// Вызовы функции для проверки
console.log( checkForSpam('Latest technology news') ); // false

console.log( checkForSpam('JavaScript weekly newsletter') ); // false

console.log( checkForSpam('Get best sale offers now!') ); // true

console.log( checkForSpam('[SPAM] How to earn fast money?') ); // true

/////////////////////////////////

// Format string (max length and '...')

/*
  Напиши функцию formatString(str)
  
  - Функия принимает на вход строку str
  - Если длина строки не превышает 40 символов, функция возвращает ее. 
  - Если длина больше 40 символов, то функция обрезает строку до 40-ка
    символов и добавляет в конец строки троеточие '...', после чего 
    возвращает укороченную версию.
*/

// Вызовы функции для проверки

const formatString = (str) => {
  if (str.length <= 40) {
    return str;
  } else if (str.length > 40) {
    return str.slice(0, 40) + '...';
  }
};

console.log(
  formatString("Curabitur ligula sapien, tincidunt non.")
); // вернется оригинальная строка

console.log(
  formatString("Vestibulum facilisis, purus nec pulvinar iaculis.")
); // вернется форматированная строка

console.log(
  formatString("Curabitur ligula sapien.")
); // вернется оригинальная строка

console.log(
  formatString("Nunc sed turpis. Curabitur a felis in nunc fringilla tristique.")
); // вернется форматированная строка


//////////////////////////////////////////////////////////////////////////////////


// Get only nums withous letters

/*  
  Написать функцию, getPx(str) 

  Функция getPx должна получать строку вида '10px',
  проверять была ли передана строка, если да, 
  возвращать только числовую составляющую, к примеру 10.
    
  Если была передана не строка, функция возвращает null.
*/

const getPx = (str) => {
  if (typeof str === 'string') {
    return parseFloat(str);
  } else {
    return null;
  }
}

// Вызовы функции для проверки
console.log( getPx("10px")); // true
console.log( getPx("10.5")); // true
console.log( getPx("0")); // true
console.log( getPx(-1) ); // null
console.log( getPx(10) ); // null

////////////////////////////////////////////////////////////////////////////////

// Array sorting

var numbers = [12, 3, 7, 9, 10, 5];

for (var i = 0; i <= numbers.length - 2; i++) {
  var minValue = numbers[i];

  for (var j = i + 1; j <= numbers.length - 1; j++) {
    if (numbers[j] < minValue) {
      minValue = numbers[j];
      var swap = numbers[i];
      numbers[i] = minValue;
      numbers[j] = swap;
    }
  }
}

console.log(numbers);
// Выведет [3, 5, 7, 9, 10, 12];

///////////////////////////////////////////////////////////////////////////////////////

// Find and display the longest word in a string

const findLongestWord = (str) => {
  const wordsArray = str.split(' ');
  let maxLength = '';
  console.log(wordsArray);
  for (let i = 0; i < wordsArray.length; i++) {
    if (maxLength.length < wordsArray[i].length) {
      maxLength = wordsArray[i];
    } 
  }
  return maxLength;
}

///////////////////////////////////////////////////////////////////////////////////////

//Find the biggest number

const findLargestNumber = (numbers) => {
  let minNum = numbers[0];
  let maxNum = numbers[0];
  for (let i = 0; i < numbers.length; i++) {
    if (maxNum < numbers[i]) {
      maxNum = numbers[i];
    }
  }
  return maxNum;
}

//////////////////////////////////////////////////////////////////////////////////////

//Find and add unique nums 

const uniqueNumbers  = [2, 1, 4, 9];

const addUniqueNumbers = () => {
  for (let i = 0; i < addUniqueNumbers.arguments.length; i++) {
    if (!uniqueNumbers.includes(addUniqueNumbers.arguments[i])) {
      uniqueNumbers.push(addUniqueNumbers.arguments[i]);
    }
  }
}

////////////////////////////////////////////////////////////////////////////////

SendForm (Input to variables)///////////////////////////////////////////////////////////////////////
function SendingPlugin() {

    this.serialise = function (form) {

        // Setup our serialized data
        var serialized = {};

        // Loop through each field in the form
        for (var i = 0; i < form.elements.length; i++) {

            var field = form.elements[i];

            // Don't serialize fields without a name, submits, buttons, file and reset inputs, and disabled fields
            if (!field.name || field.disabled || field.type === 'file' || field.type === 'reset' || field.type === 'submit' || field.type === 'button') continue;

            // If a multi-select, get all selections
            if (field.type === 'select-multiple') {
                for (var n = 0; n < field.options.length; n++) {
                    if (!field.options[n].selected) continue;
                    serialized[encodeURIComponent(field.name)] = encodeURIComponent(field.options[n].value);
                }
            }

            // Convert field data to a query string
            else if ((field.type !== 'checkbox' && field.type !== 'radio') || field.checked) {
                serialized[encodeURIComponent(field.name)] = encodeURIComponent(field.value);
            }
        }
        console.log(serialized);
        return serialized;

    };

    this.validate = function () {
    };

    this.httpPOST = function (data) {
        return new Promise(function (success, failure) {
            var req = new XMLHttpRequest();
            req.open("POST", '/send.php', true);
            //req.setRequestHeader("ClientId", _CONFIG_.APP_HASH);
            req.send(JSON.stringify(data));

            if (req.response.status === 200) {
                success(req.response);
            } else {
                var error = new Error(this.statusText);
                error.code = this.status;
                failure(error);
            }
        });
    };

    this.send = function (data = {}) {
        this.httpPOST(this.serialise(data))
        .then(
            response => window.location.href = "/success",
            error => window.location.href = "/error"
            //response => alert(`Success: ${response}`),
            //error => alert(`Failure: ${error}`)
            );

    };
};
///////////////////////////////////////////////////////////////////////////////
